var l=Object.defineProperty;var f=(c,t,i)=>t in c?l(c,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):c[t]=i;var r=(c,t,i)=>f(c,typeof t!="symbol"?t+"":t,i);import{i as a}from"./index-BOMCLsi_.js";const s=class s{constructor(){r(this,"checkInterval",null)}static getInstance(){return s.instance||(s.instance=new s),s.instance}async init(){await a.init(),this.startScheduleChecker(),await this.checkMissedNotifications(),console.log("PWA Notification Scheduler Initialized.")}async scheduleNotification(t){const i={...t,id:crypto.randomUUID(),createdAt:Date.now(),status:"pending"};await this.saveScheduledNotification(i);const e=t.scheduledTime-Date.now();return e<=5*60*1e3&&e>0&&setTimeout(()=>this.deliverNotification(i.id),e),i.id}async cancelNotification(t){const i=await this.getScheduledNotification(t);i&&(i.status="expired",await this.saveScheduledNotification(i))}async saveScheduledNotification(t){const i=await a.getStore("scheduledNotifications","readwrite");return new Promise((e,n)=>{const o=i.put(t);o.onsuccess=()=>e(),o.onerror=()=>n(o.error)})}async getScheduledNotification(t){const i=await a.getStore("scheduledNotifications");return new Promise((e,n)=>{const o=i.get(t);o.onsuccess=()=>e(o.result||null),o.onerror=()=>n(o.error)})}async getAllPendingNotifications(){const i=(await a.getStore("scheduledNotifications")).index("status");return new Promise((e,n)=>{const o=i.getAll("pending");o.onsuccess=()=>e(o.result),o.onerror=()=>n(o.error)})}startScheduleChecker(){this.checkInterval&&clearInterval(this.checkInterval),this.checkInterval=window.setInterval(()=>this.checkDueNotifications(),3e4)}async checkDueNotifications(){try{if(typeof a.getStore!="function")return;const t=await this.getAllPendingNotifications(),i=Date.now();for(const e of t)e.scheduledTime<=i&&await this.deliverNotification(e.id)}catch(t){console.error("Error checking due notifications:",t)}}async checkMissedNotifications(){try{const t=await this.getAllPendingNotifications(),i=Date.now();let e=0;for(const n of t)n.scheduledTime<=i&&(await this.deliverNotification(n.id),e++);e>0&&"Notification"in window&&Notification.permission==="granted"&&new Notification("Taskly - Missed Notifications",{body:`You had ${e} missed notification${e>1?"s":""} while you were away.`,icon:"/icon-192x192.png",tag:"missed-notifications"})}catch(t){console.error("Error checking missed notifications:",t)}}async deliverNotification(t){try{const i=await this.getScheduledNotification(t);if(!i||i.status!=="pending")return;if(Date.now()-i.scheduledTime>60*60*1e3){i.status="expired",await this.saveScheduledNotification(i);return}"serviceWorker"in navigator&&navigator.serviceWorker.controller?navigator.serviceWorker.controller.postMessage({type:"SHOW_NOTIFICATION",options:{...i}}):"Notification"in window&&Notification.permission==="granted"&&new Notification(i.title,{...i}),i.status="delivered",await this.saveScheduledNotification(i)}catch(i){console.error("Error delivering notification:",i)}}destroy(){this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null)}};r(s,"instance");let d=s;const w=d.getInstance();export{w as pwaNotificationScheduler};
